/*
 * WdbStream.cpp
 *
 *  Created on: Feb 26, 2010
 *      Author: juergens
 */

/*
 $Id$

 Copyright (C) 2006 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: diana@met.no

 This file is part of generated by met.no

 This is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Tseries; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include "WdbStream.h"
#include <iostream>

using namespace std;
using namespace miutil;
namespace pets
{





bool WdbStream::setDataProviders()
{
  dataProviders.clear();
  pqxx::work query(wdb,"getDataProvider");
  query.exec(QUERY::BEGIN(user));
  string providername;

  pqxx::result res = query.exec(QUERY::BROWSE("NULL::wci.browsedataprovider" ));

  for (pqxx::result::size_type i = 0; i != res.size(); ++i) {
    res.at(i).at(0).to(   providername );
    dataProviders.insert( providername );
  }
  return !dataProviders.empty();
}

bool WdbStream::setCurrentProvider(string currentProviderName)
{
  if(!dataProviders.count(currentProviderName))
    return false;

  currentProvider = currentProviderName;
  setReferenceTimes();
}

bool WdbStream::setReferenceTimes()
{
  if(!dataProviders.count(currentProvider))
    return false;

  referenceTimes.clear();
  pqxx::work query(wdb,"getReferencetime");
  query.exec(QUERY::BEGIN(user));
  string reftime;

  pqxx::result res = query.exec(QUERY::REFERENCETIMES(currentProvider));

  for (pqxx::result::size_type i = 0; i != res.size(); ++i) {
    res.at(i).at(0).to( reftime );
    if(!reftime.empty())
      referenceTimes.insert(miTime(reftime));
   }
  return true;
}


bool WdbStream::openStream(ErrorFlag* error)
{
  try {
    setDataProviders();
  } catch (exception& e) {
    cerr << "Exception while opening WdbStream: " << e.what() <<endl;
    *error = DF_FILE_OPEN_ERROR;
    return false;
  }

  *error=OK;
  return true;
}





}
