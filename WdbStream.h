/*
 * WdbStream.h
 *
 *  Created on: Feb 26, 2010
 *      Author: juergens
 */

#ifndef WDBSTREAM_H_
#define WDBSTREAM_H_

/*
 $Id$

 Copyright (C) 2006 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: diana@met.no

 This file is part of generated by met.no

 This is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Tseries; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <string>
#include <set>
#include <puTools/miTime.h>

#include <pqxx/pqxx>

#include "WdbQueries.h"
#include "ptDataStream.h"

// the pets (tseries) wdb-connection

namespace pets{



class WdbStream : public DataStream {
private:

  std::set<std::string>    dataProviders;
  std::string              currentProvider;
  std::set<miutil::miTime> referenceTimes;

  pqxx::connection wdb;
  std::string      user;

public:
  WdbStream(std::string host, std::string u="proffread") :
      wdb( QUERY::CONNECT(host,u) ) , user(u), DataStream("WdbStream")
      { setDataProviders(); }

  /// Implemented from DataStream --

    bool openStream(ErrorFlag*);

//  virtual int findStation(const miString&)=0; // find station index
//    virtual int findDataPar(const ParId&)=0;
//    virtual void clean()=0;
//    virtual void cleanParData()
//    {
//      parameters.clear();
//      DataIsRead = false;
//    }


//    virtual bool readData(const int posIndex, const ParId&, const miTime&,
//        const miTime&, ErrorFlag*)=0;
//    virtual bool getTimeLine(const int& index, vector<miTime>& tline,
//        vector<int>& pline, ErrorFlag*)=0;
//    virtual bool putTimeLine(const int& index, vector<miTime>& tline,
//        vector<int>& pline, ErrorFlag*)
//    {
//      return false;
//    }
//    virtual bool putTimeLine(TimeLine& tl, vector<int>& pline, ErrorFlag*)
//    {
//      return false;
//    }
//    virtual bool getOnePar(int, WeatherParameter&, ErrorFlag*)=0;
//    virtual bool putOnePar(WeatherParameter&, ErrorFlag*)
//    {
//      return false;
//    }
//    virtual bool getStations(vector<miPosition>&)
//    {
//      return false;
//    }
//    virtual bool getStationSeq(int, miPosition&)=0;
//    virtual bool getModelSeq(int, Model&, // fetch model info
//        Run&, int&)=0;
//    virtual bool getModelSeq(int, Model&, // fetch model info
//        Run&, int&, vector<miString>&)=0;
//    virtual int putStation(const miPosition& s, //adds station to posList
//        ErrorFlag*)
//    {
//      return 0;
//    }
//    virtual bool writeData(const int posIndex, //write data to file
//        const int modIndex, ErrorFlag*, bool complete_write, bool write_submodel)
//    {
//      return false;
//    }
//    virtual bool close() = 0;
//    virtual void getTextLines(const ParId p, vector<miString>& tl)
//    {
//      tl = textLines;
//    }
//
//
//

  /// WDB functions -----
  // dataProviders
  bool                  setDataProviders();
  std::set<std::string> getDataProviders() const  {return dataProviders;}

  bool        setCurrentProvider(std::string currentProviderName);
  std::string getCurrentProvider() const { return currentProvider;}

  // referenceTimes
  bool                     setReferenceTimes();
  std::set<miutil::miTime> getReferenceTimes() const {return referenceTimes;}




};
}

#endif /* WDBSTREAM_H_ */
