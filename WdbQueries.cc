/*
 * WdbQueries.cc
 *
 *  Created on: Feb 26, 2010
 *      Author: juergens
 */

/*
 $Id$

 Copyright (C) 2006 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: diana@met.no

 This file is part of generated by met.no

 This is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Tseries; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include "WdbQueries.h"
using namespace std;

namespace pets  {
namespace QUERY   {

static string quote= "\'";

static string quoted(string token)
{
  return quote+token+quote;
}

string CONNECT(string host, string user)
{
  ostringstream query;
  query << "dbname=wdb user=" << user << " host=" << host;
  return query.str();
};

string BROWSE(std::string browse)
{
  ostringstream query;
  query << "SELECT * FROM wci.browse(" <<  browse << ")";
  return query.str();
};

string BEGIN(std::string user)
{
  ostringstream query;
  query <<  "SELECT wci.begin(" << quoted(user) << ")";
  return query.str();
}

string READ(string token)
{
  ostringstream query;
  query << "SELECT * FROM wci.read(" << token << ")";
  return query.str();
}


string REFERENCETIMES( std::string providerName)
{
  ostringstream query;
  query << "ARRAY["
      << quoted(providerName)
      << "],NULL, NULL,NULL, NULL,NULL, NULL, NULL::wci.browsereferencetime";

  return BROWSE(query.str());
}






string TIMESERIES( string model,
    string run,
    string parameter,
    float  lat,
    float  lon,
    string height)
{

  ostringstream query;
  query << "ARRAY["
        << quoted(model)     << ","
        << quote             <<  "bilinear POINT(" << lat << " " << lon  << ")" << quote  << ","
        << quoted(run)       << ",NULL, ARRAY["
        << quoted(parameter) << "],"
        << quoted(height)    << ","
        << "ARRAY[-1], NULL::wci.returnfloat);";

  return READ(query.str());
}

} // << QUERY
} // << pets
